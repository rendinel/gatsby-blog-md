In order to help google understand our content and rank better in his results we need to add metadata to our pages.In gatsby we can easily achieve this by using the gatsby head api.With this api gastby automatically provide support for server rendering our metadata and add them to the static HTML pages.
Let's start by creating a hooks folder inside our src folder, then inside this folder let's create use-site-metadata.js and inside this file

import { graphql, useStaticQuery } from 'gatsby'

export const useSiteMetadata = () => {
  const data = useStaticQuery(graphql`
    query {
      site {
        siteMetadata {
          title
          description
          twitterUsername
          image
          siteUrl
        }
      }
    }
  `)

  return data.site.siteMetadata
}

we are simplying run a query that return all the siteMetadata that we want to use inside our head.
Then let's  create a seo folder inside the components folder and inside this folder let's create seo.js file 

import React from 'react'
import { useSiteMetadata } from '../../hooks/use-site-metadata'

export default function Seo({ title, description, pathname, children }) {
  const {
    title: defaultTitle,
    description: defaultDescription,
    image,
    siteUrl,
    twitterUsername,
  } = useSiteMetadata()

  const seo = {
    title: title || defaultTitle,
    description: description || defaultDescription,
    image: `${siteUrl}${image}`,
    url: `${siteUrl}${pathname || ``}`,
    twitterUsername,
  }

  return (
    <>
      <title>{seo.title}</title>
      <meta name='description' content={seo.description} />
      <meta name='image' content={seo.image} />
      <meta name='twitter:card' content='summary_large_image' />
      <meta name='twitter:title' content={seo.title} />
      <meta name='twitter:url' content={seo.url} />
      <meta name='twitter:description' content={seo.description} />
      <meta name='twitter:image' content={seo.image} />
      <meta name='twitter:creator' content={seo.twitterUsername} />
      <link
        rel='icon'
        href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='0.9em' font-size='90'>ðŸ‘¤</text></svg>"
      />
      {children}
    </>
  )
}

here we define that our component will receive title, description, pathname as props and our siteMetadata are used as default value if no props are provided.Since some value like twitterUsername always stay constant in every page we don't need to provide a default value.

all it's left now it's to go inside all our page and render the seo component, you can either leave the default props or writing some new props when you render it 

inside Homepage.js 

import React from 'react'
import Hero from './Hero'
import News from './News'
import Contact from './Contact'
import Seo from '../seo/seo'

function HomePage() {
  return (
    <>
      <Seo title='John Doe Website' />
      <Hero />
      <News />
      <Contact />
    </>
  )
}

export default HomePage

then inside blog-list.js

import React from 'react'
import { graphql } from 'gatsby'
import BlogLayout from '../components/blog/BlogLayout'
import Pagination from '../components/blog/Pagination'
import BlogPosts from '../components/blog/BlogPosts'
import Seo from '../components/seo/seo'

export default function BlogList({ data, pageContext }) {
  const { currentPage, numberOfPages } = pageContext
  const {
    allMarkdownRemark: { nodes: posts },
  } = data
  return (
    <BlogLayout>
      <Seo />
      {posts.map((post) => {
        const {
          fields: { slug },
          frontmatter: { date, title, category, desc },
        } = post
        return (
          <BlogPosts
            key={slug}
            slug={slug}
            date={date}
            title={title}
            category={category}
            desc={desc}
          />
        )
      })}
      <Pagination currentPage={currentPage} numberOfPages={numberOfPages} />
    </BlogLayout>
  )
}

export const pageQuery = graphql`
  query blogListQuery($limit: Int!, $offset: Int!) {
    allMarkdownRemark(
      limit: $limit
      skip: $offset
      sort: { fields: frontmatter___date, order: DESC }
    ) {
      nodes {
        frontmatter {
          date(formatString: "MMMM Do, YYYY")
          title
          category
          desc
        }
        fields {
          slug
        }
      }
    }
  }
`

then inside category.js

import React from 'react'
import { graphql } from 'gatsby'
import BlogLayout from '../components/blog/BlogLayout'
import BlogPosts from '../components/blog/BlogPosts'
import Seo from '../components/seo/seo'
import { capitalizeFirstLetter } from '../utils/capitalizeFirstLetter'

export default function Category({ data }) {
  const {
    allMarkdownRemark: { nodes: posts },
  } = data
  return (
    <BlogLayout>
      {posts.map((post) => {
        const {
          fields: { slug },
          frontmatter: { date, title, category, desc },
        } = post
        return (
          <>
            <Seo title={`${capitalizeFirstLetter(category)} page`} />
            <BlogPosts
              key={slug}
              slug={slug}
              date={date}
              title={title}
              category={category}
              desc={desc}
            />
          </>
        )
      })}
    </BlogLayout>
  )
}

export const pageQuery = graphql`
  query categoryQuery($category: String!) {
    allMarkdownRemark(
      sort: { fields: frontmatter___date, order: DESC }
      filter: { frontmatter: { category: { eq: $category } } }
    ) {
      nodes {
        frontmatter {
          date(formatString: "MMMM Do, YYYY")
          title
          category
          desc
        }
        fields {
          slug
        }
      }
    }
  }
`

import React from 'react'
import { graphql } from 'gatsby'
import { GatsbyImage, getImage } from 'gatsby-plugin-image'
import { Link } from 'gatsby'
import { capitalizeFirstLetter } from '../utils/capitalizeFirstLetter'
import Seo from '../components/seo/seo'

export default function SinglePost({ data }) {
  const {
    allMarkdownRemark: { nodes },
  } = data
  const coverImg = getImage(nodes[0].frontmatter.cover)
  return (
    <section className='text-gray-600 body-font'>
      <Seo title={`${nodes[0].frontmatter.title}`} />
      <div className='container px-5 py-24 mx-auto flex flex-col'>
        <div className='lg:w-4/6 mx-auto'>
          <div className='font-sans'>
            <h1 className='text-gray-900 title-font font-bold font-sans break-normal pt-6 pb-2 text-3xl md:text-4xl'>
              {nodes[0].frontmatter.title}
            </h1>
            <p className='text-sm md:text-base font-semibold text-gray-600'>
              {nodes[0].frontmatter.date}
            </p>
            <h3 className='title-font text-gray-700  text-sm md:text-base font-semibold pt-2 pb-2'>
              <Link to={`/blog/${nodes[0].frontmatter.category}`}>
                {capitalizeFirstLetter(nodes[0].frontmatter.category)}
              </Link>
            </h3>
          </div>
          <GatsbyImage
            as='div'
            className='rounded-lg h-64 overflow-hidden'
            imgClassName='object-cover object-center h-full w-full'
            layout='fullWidth'
            image={coverImg}
            alt={`${nodes[0].frontmatter.title} cover image`}
          />
          <div className='mt-10'>
            <div
              className='prose max-w-5xl'
              dangerouslySetInnerHTML={{ __html: nodes[0].html }}
            />
          </div>
        </div>
      </div>
    </section>
    // <div className='container w-full md:max-w-3xl mx-auto'>
    //   <div className='w-full px-4 md:px-6 text-xl text-gray-900 leading-normal'>
    // <div className='font-sans'>
    //   <h1 className='text-gray-900 title-font font-bold font-sans break-normal pt-6 pb-2 text-3xl md:text-4xl'>
    //     {nodes[0].frontmatter.title}
    //   </h1>
    //   <p className='text-sm md:text-base font-semibold text-gray-600'>
    //     {nodes[0].frontmatter.date}
    //   </p>
    //   <h3 className='title-font text-gray-700  text-sm md:text-base font-semibold pt-2 pb-2'>
    //     <Link to={`/blog/${nodes[0].frontmatter.category}`}>
    //       {capitalizeFirstLetter(nodes[0].frontmatter.category)}
    //     </Link>
    //   </h3>
    //     </div>
    // <GatsbyImage
    //   as='div'
    //   className='h-full w-full mt-4'
    //   imgClassName='object-cover object-center '
    //   layout='fullWidth'
    //   image={coverImg}
    //   alt={`${nodes[0].frontmatter.title} cover image`}
    // />
    // <div
    //   className='prose max-w-5xl'
    //   dangerouslySetInnerHTML={{ __html: nodes[0].html }}
    // />
    //   </div>
    // </div>
  )
}

export const pageQuery = graphql`
  query singlePostQuery($slug: String!) {
    allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {
      nodes {
        fields {
          slug
        }
        frontmatter {
          category
          date(formatString: "MMMM Do, YYYY")
          desc
          title
          cover {
            childImageSharp {
              gatsbyImageData(width: 1200, placeholder: BLURRED)
            }
          }
        }
        html
      }
    }
  }
`
inside single-post.js

import React from 'react'
import { graphql } from 'gatsby'
import { GatsbyImage, getImage } from 'gatsby-plugin-image'
import { Link } from 'gatsby'
import { capitalizeFirstLetter } from '../utils/capitalizeFirstLetter'
import Seo from '../components/seo/seo'

export default function SinglePost({ data }) {
  const {
    allMarkdownRemark: { nodes },
  } = data
  const coverImg = getImage(nodes[0].frontmatter.cover)
  return (
    <section className='text-gray-600 body-font'>
      <Seo title={`${nodes[0].frontmatter.title}`} />
      <div className='container px-5 py-24 mx-auto flex flex-col'>
        <div className='lg:w-4/6 mx-auto'>
          <div className='font-sans'>
            <h1 className='text-gray-900 title-font font-bold font-sans break-normal pt-6 pb-2 text-3xl md:text-4xl'>
              {nodes[0].frontmatter.title}
            </h1>
            <p className='text-sm md:text-base font-semibold text-gray-600'>
              {nodes[0].frontmatter.date}
            </p>
            <h3 className='title-font text-gray-700  text-sm md:text-base font-semibold pt-2 pb-2'>
              <Link to={`/blog/${nodes[0].frontmatter.category}`}>
                {capitalizeFirstLetter(nodes[0].frontmatter.category)}
              </Link>
            </h3>
          </div>
          <GatsbyImage
            as='div'
            className='rounded-lg h-64 overflow-hidden'
            imgClassName='object-cover object-center h-full w-full'
            layout='fullWidth'
            image={coverImg}
            alt={`${nodes[0].frontmatter.title} cover image`}
          />
          <div className='mt-10'>
            <div
              className='prose max-w-5xl'
              dangerouslySetInnerHTML={{ __html: nodes[0].html }}
            />
          </div>
        </div>
      </div>
    </section>
    // <div className='container w-full md:max-w-3xl mx-auto'>
    //   <div className='w-full px-4 md:px-6 text-xl text-gray-900 leading-normal'>
    // <div className='font-sans'>
    //   <h1 className='text-gray-900 title-font font-bold font-sans break-normal pt-6 pb-2 text-3xl md:text-4xl'>
    //     {nodes[0].frontmatter.title}
    //   </h1>
    //   <p className='text-sm md:text-base font-semibold text-gray-600'>
    //     {nodes[0].frontmatter.date}
    //   </p>
    //   <h3 className='title-font text-gray-700  text-sm md:text-base font-semibold pt-2 pb-2'>
    //     <Link to={`/blog/${nodes[0].frontmatter.category}`}>
    //       {capitalizeFirstLetter(nodes[0].frontmatter.category)}
    //     </Link>
    //   </h3>
    //     </div>
    // <GatsbyImage
    //   as='div'
    //   className='h-full w-full mt-4'
    //   imgClassName='object-cover object-center '
    //   layout='fullWidth'
    //   image={coverImg}
    //   alt={`${nodes[0].frontmatter.title} cover image`}
    // />
    // <div
    //   className='prose max-w-5xl'
    //   dangerouslySetInnerHTML={{ __html: nodes[0].html }}
    // />
    //   </div>
    // </div>
  )
}

export const pageQuery = graphql`
  query singlePostQuery($slug: String!) {
    allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {
      nodes {
        fields {
          slug
        }
        frontmatter {
          category
          date(formatString: "MMMM Do, YYYY")
          desc
          title
          cover {
            childImageSharp {
              gatsbyImageData(width: 1200, placeholder: BLURRED)
            }
          }
        }
        html
      }
    }
  }
`

Now it's finaly time to put our site online, first we need to go to run inside the terminal

gatsby build

this will genereate the production ready version of our website, we can find the production version of our website inside the 
public folder contained in the root folder of our app. Then we can go to https://www.netlify.com/ , you can either sign up if you don't have an account or log in if you already have an account, then inside the dashboard you have to click on add new site/deploy manually and then simply drag and drop your public folder in this page, after a few minutes you will be able to access the site on the link provided by netifly.